{"version":3,"file":"main.a076c984335ccf7b93cb.bundle.js","sources":["webpack:///./packages/utils-react/src/components/PortalContext.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DEFAULT_PORTAL_DOM_NODE_ID } from './constants';\nimport { warning } from '../functions';\n\nlet warnedParentDOMNodeAndParentDOMNodeIdSpecified = false;\n\nexport const resetWarnings = () => {\n  warnedParentDOMNodeAndParentDOMNodeIdSpecified = false;\n};\n\nconst defaultValue = {\n  parentDOMNode: undefined,\n  parentDOMNodeId: DEFAULT_PORTAL_DOM_NODE_ID,\n};\n\nconst PortalContext = React.createContext(defaultValue);\n\n/**\n * @typedef {Object} PortalContextProviderProps\n * @property {React.ReactNode} children\n * @property {HTMLElement} [parentDOMNode]\n * @property {string} [parentDOMNodeId]\n */\n\n/**\n * @name PortalContext.Provider\n * @type {React.Component<PortalContextProviderProps>}\n */\nclass PortalContextProvider extends React.Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    /* eslint-disable react/no-unused-prop-types */\n    /**\n     * The DOM node that should be used to house portals.\n     *\n     * ⚠️ **NOTE:** One of `parentDOMNode` or `parentDOMNodeId` can be\n     * specified, but not both. If `parentDOMNode` is specified,\n     * `parentDOMNodeId` will be ignored.\n     */\n    parentDOMNode: PropTypes.instanceOf(\n      typeof Node !== 'undefined' ? Node : /* istanbul ignore next */ Object,\n    ),\n    /**\n     * The _id_ of the DOM node that should be used to house portals. If a node\n     * with this id does not already exist in the application, it will be\n     * created by the `Portal` component under the `document.body` element.\n     *\n     * ⚠️ **NOTE:** One of `parentDOMNode` or `parentDOMNodeId` can be\n     * specified, but not both. If `parentDOMNode` is specified,\n     * `parentDOMNodeId` will be ignored.\n     */\n    parentDOMNodeId: PropTypes.string,\n    /* eslint-enable react/no-unused-prop-types */\n  };\n\n  static defaultProps = {\n    parentDOMNode: undefined,\n    parentDOMNodeId: DEFAULT_PORTAL_DOM_NODE_ID,\n  };\n\n  static getDerivedStateFromProps(\n    { parentDOMNode, parentDOMNodeId },\n    prevState,\n  ) {\n    const nextState = {};\n\n    if (parentDOMNode !== prevState.parentDOMNode) {\n      nextState.parentDOMNode = parentDOMNode;\n\n      /* istanbul ignore else */\n      if (parentDOMNode) {\n        // Unset `parentDOMNodeId` so that it can't be in conflict with\n        // `parentDOMNode`.\n        nextState.parentDOMNodeId = undefined;\n      }\n    }\n\n    if (!parentDOMNode && parentDOMNodeId !== prevState.parentDOMNodeId) {\n      nextState.parentDOMNodeId = parentDOMNodeId;\n    }\n\n    // Print warnings if both `parentDOMNode` and `parentDOMNodeId` are defined.\n    //\n    // NOTE: Don't print the warning if `parentDOMNodeId` is its default value\n    // - it's likely that someone just forgot to override the default with\n    // `undefined`.\n    if (\n      !warnedParentDOMNodeAndParentDOMNodeIdSpecified &&\n      parentDOMNode &&\n      parentDOMNodeId &&\n      parentDOMNodeId !== DEFAULT_PORTAL_DOM_NODE_ID\n    ) {\n      warning(\n        false,\n        'Both `parentDOMNode` and `parentDOMNodeId` have been specified on a ' +\n          '`PortalContext.Provider` component. Only one of these should be ' +\n          'supplied. `parentDOMNodeId` will be ignored.',\n      );\n      warnedParentDOMNodeAndParentDOMNodeIdSpecified = true;\n    }\n\n    return Object.keys(nextState).length > 0\n      ? nextState\n      : /* istanbul ignore next */ null;\n  }\n\n  /* eslint-disable react/no-unused-state */\n  state = {\n    parentDOMNode: undefined,\n    parentDOMNodeId: undefined,\n  };\n  /* eslint-enable react/no-unused-state */\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <PortalContext.Provider value={this.state}>\n        {children}\n      </PortalContext.Provider>\n    );\n  }\n}\n\nexport default {\n  Consumer: PortalContext.Consumer,\n  Provider: PortalContextProvider,\n};\n"],"mappings":"AAKA","sourceRoot":""}